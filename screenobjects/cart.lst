------- FILE screenobjects.asm LEVEL 1 PASS 3
      1  fffe					      PROCESSOR	6502
      2  10000 ????
      3  10000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      4  10000 ????						;; include required files with definition and macros 
      5  10000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
------- FILE vcs.h LEVEL 2 PASS 3
      0  10000 ????				       INCLUDE	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE screenobjects.asm
------- FILE macro.h LEVEL 2 PASS 3
      0  10000 ????				       INCLUDE	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_MACRO =	106
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  10000 ????						;			   used for code assembly.
     25  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  10000 ????						;
     27  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  10000 ????						;
     29  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  10000 ????						;			   (standardised macro for vertical synch code)
     31  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  10000 ????						; 1.0	22/MAR/2003		Initial release
     34  10000 ????
     35  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  10000 ????						;   registers and require them to be defined first).
     40  10000 ????
     41  10000 ????						; Available macros...
     42  10000 ????						;   SLEEP n		 - sleep for n cycles
     43  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  10000 ????
     47  10000 ????						;-------------------------------------------------------------------------------
     48  10000 ????						; SLEEP duration
     49  10000 ????						; Original author: Thomas Jentzsch
     50  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  10000 ????						; useful for code where precise timing is required.
     52  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  10000 ????
     56  10000 ????				       MAC	sleep
     57  10000 ????			    .CYCLES    SET	{1}
     58  10000 ????
     59  10000 ????				       IF	.CYCLES < 2
     60  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  10000 ????				       ERR
     62  10000 ????				       ENDIF
     63  10000 ????
     64  10000 ????				       IF	.CYCLES & 1
     65  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     66  10000 ????				       nop	0
     67  10000 ????				       ELSE
     68  10000 ????				       bit	VSYNC
     69  10000 ????				       ENDIF
     70  10000 ????			    .CYCLES    SET	.CYCLES - 3
     71  10000 ????				       ENDIF
     72  10000 ????
     73  10000 ????				       REPEAT	.CYCLES / 2
     74  10000 ????				       nop
     75  10000 ????				       REPEND
     76  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     77  10000 ????
     78  10000 ????						;-------------------------------------------------------------------------------
     79  10000 ????						; VERTICAL_SYNC
     80  10000 ????						; revised version by Edwin Blink -- saves bytes!
     81  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  10000 ????						; Note: Alters the accumulator
     83  10000 ????
     84  10000 ????						; OUT: A = 0
     85  10000 ????
     86  10000 ????				       MAC	vertical_sync
     87  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  10000 ????				       sta	VSYNC
     90  10000 ????				       lsr
     91  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     92  10000 ????				       ENDM
     93  10000 ????
     94  10000 ????						;-------------------------------------------------------------------------------
     95  10000 ????						; CLEAN_START
     96  10000 ????						; Original author: Andrew Davie
     97  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  10000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  10000 ????						; Use as very first section of code on boot (ie: at reset)
    101  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  10000 ????
    103  10000 ????				       MAC	clean_start
    104  10000 ????				       sei
    105  10000 ????				       cld
    106  10000 ????
    107  10000 ????				       ldx	#0
    108  10000 ????				       txa
    109  10000 ????				       tay
    110  10000 ????			    .CLEAR_STACK dex
    111  10000 ????				       txs
    112  10000 ????				       pha
    113  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  10000 ????
    115  10000 ????				       ENDM
    116  10000 ????
    117  10000 ????						;-------------------------------------------------------
    118  10000 ????						; SET_POINTER
    119  10000 ????						; Original author: Manuel Rotschkar
    120  10000 ????						;
    121  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  10000 ????						;
    123  10000 ????						; Usage: SET_POINTER pointer, address
    124  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  10000 ????						;
    126  10000 ????						; Note: Alters the accumulator, NZ flags
    127  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  10000 ????						; IN 2: absolute address
    129  10000 ????
    130  10000 ????				       MAC	set_pointer
    131  10000 ????			    .POINTER   SET	{1}
    132  10000 ????			    .ADDRESS   SET	{2}
    133  10000 ????
    134  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  10000 ????				       STA	.POINTER	; Store in pointer
    136  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    137  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    138  10000 ????
    139  10000 ????				       ENDM
    140  10000 ????
    141  10000 ????						;-------------------------------------------------------
    142  10000 ????						; BOUNDARY byte#
    143  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  10000 ????						;
    145  10000 ????						; Push data to a certain position inside a page and keep count of how
    146  10000 ????						; many free bytes the programmer will have.
    147  10000 ????						;
    148  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  10000 ????
    150  10000 ????			    .FREE_BYTES SET	0
    151  10000 ????				       MAC	boundary
    152  10000 ????				       REPEAT	256
    153  10000 ????				       IF	<. % {1} = 0
    154  10000 ????				       MEXIT
    155  10000 ????				       ELSE
    156  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    157  10000 ????				       .byte	$00
    158  10000 ????				       ENDIF
    159  10000 ????				       REPEND
    160  10000 ????				       ENDM
    161  10000 ????
    162  10000 ????
    163  10000 ????						; EOF
------- FILE screenobjects.asm
      8  10000 ????
      9  10000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     10  10000 ????						;; start an unitialized segment at $80 for variable declaration
     11  10000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     12 U0004 ????				      SEG.U	Variables
     13 U0004 ????	       00	   P0Height   DS	1	; defines one byte for player 0 height
     14 U0005 ????	       00	   P1Height   DS	1
     15 U0006 ????
     16 U0006 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     17 U0006 ????						;; starts our ROM code
     18 U0006 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     19  10000 ????				       SEG
     20  f000					      ORG	$F000
     21  f000
     22  f000				   Reset
      0  f000					      CLEAN_START
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     24  f00b
     25  f00b		       a2 80		      LDX	#$80	; build background color
     26  f00d		       86 09		      STX	COLUBK	;
     27  f00f
     28  f00f		       a9 0f		      LDA	#%1111	; white playfield color
     29  f011		       85 08		      STA	COLUPF	;
     30  f013
     31  f013		       a9 0a		      LDA	#10
     32  f015		       8d 04 00 	      STA	P0Height	; P0Height = 10
     33  f018
     34  f018							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     35  f018							;; we set the TIA register for the color of P0 and P1
     36  f018							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     37  f018		       a9 48		      LDA	#$48	; player 0 color light red
     38  f01a		       85 06		      STA	COLUP0	;
     39  f01c
     40  f01c		       a9 c6		      LDA	#$c6	; player 1 color light green
     41  f01e		       85 07		      STA	COLUP1
     42  f020
     43  f020							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     44  f020							;; start new frame by configuring VBANK and VSYNC
     45  f020							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     46  f020				   StartFarme
     47  f020		       a9 02		      LDA	#02
     48  f022		       85 01		      STA	VBLANK	; turn VBLANK on
     49  f024		       85 00		      STA	VSYNC	; turn VSYNC on
     50  f026
     51  f026							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     52  f026							;; generate three line of VSYNC
     53  f026							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     54  f026					      REPEAT	3
     55  f026		       85 02		      STA	WSYNC	; three scanline for VSYNC
     54  f026					      REPEND
     55  f028		       85 02		      STA	WSYNC	; three scanline for VSYNC
     54  f028					      REPEND
     55  f02a		       85 02		      STA	WSYNC	; three scanline for VSYNC
     56  f02c					      REPEND
     57  f02c		       a9 00		      LDA	#0	;
     58  f02e		       85 00		      STA	VSYNC	; turn off VSYNC
     59  f030
     60  f030							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     61  f030							;; let the TIA output the 37 recommmended lines of VBLANK
     62  f030							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     63  f030					      REPEAT	37
     64  f030		       85 02		      STA	WSYNC	;
     63  f030					      REPEND
     64  f032		       85 02		      STA	WSYNC	;
     63  f032					      REPEND
     64  f034		       85 02		      STA	WSYNC	;
     63  f034					      REPEND
     64  f036		       85 02		      STA	WSYNC	;
     63  f036					      REPEND
     64  f038		       85 02		      STA	WSYNC	;
     63  f038					      REPEND
     64  f03a		       85 02		      STA	WSYNC	;
     63  f03a					      REPEND
     64  f03c		       85 02		      STA	WSYNC	;
     63  f03c					      REPEND
     64  f03e		       85 02		      STA	WSYNC	;
     63  f03e					      REPEND
     64  f040		       85 02		      STA	WSYNC	;
     63  f040					      REPEND
     64  f042		       85 02		      STA	WSYNC	;
     63  f042					      REPEND
     64  f044		       85 02		      STA	WSYNC	;
     63  f044					      REPEND
     64  f046		       85 02		      STA	WSYNC	;
     63  f046					      REPEND
     64  f048		       85 02		      STA	WSYNC	;
     63  f048					      REPEND
     64  f04a		       85 02		      STA	WSYNC	;
     63  f04a					      REPEND
     64  f04c		       85 02		      STA	WSYNC	;
     63  f04c					      REPEND
     64  f04e		       85 02		      STA	WSYNC	;
     63  f04e					      REPEND
     64  f050		       85 02		      STA	WSYNC	;
     63  f050					      REPEND
     64  f052		       85 02		      STA	WSYNC	;
     63  f052					      REPEND
     64  f054		       85 02		      STA	WSYNC	;
     63  f054					      REPEND
     64  f056		       85 02		      STA	WSYNC	;
     63  f056					      REPEND
     64  f058		       85 02		      STA	WSYNC	;
     63  f058					      REPEND
     64  f05a		       85 02		      STA	WSYNC	;
     63  f05a					      REPEND
     64  f05c		       85 02		      STA	WSYNC	;
     63  f05c					      REPEND
     64  f05e		       85 02		      STA	WSYNC	;
     63  f05e					      REPEND
     64  f060		       85 02		      STA	WSYNC	;
     63  f060					      REPEND
     64  f062		       85 02		      STA	WSYNC	;
     63  f062					      REPEND
     64  f064		       85 02		      STA	WSYNC	;
     63  f064					      REPEND
     64  f066		       85 02		      STA	WSYNC	;
     63  f066					      REPEND
     64  f068		       85 02		      STA	WSYNC	;
     63  f068					      REPEND
     64  f06a		       85 02		      STA	WSYNC	;
     63  f06a					      REPEND
     64  f06c		       85 02		      STA	WSYNC	;
     63  f06c					      REPEND
     64  f06e		       85 02		      STA	WSYNC	;
     63  f06e					      REPEND
     64  f070		       85 02		      STA	WSYNC	;
     63  f070					      REPEND
     64  f072		       85 02		      STA	WSYNC	;
     63  f072					      REPEND
     64  f074		       85 02		      STA	WSYNC	;
     63  f074					      REPEND
     64  f076		       85 02		      STA	WSYNC	;
     63  f076					      REPEND
     64  f078		       85 02		      STA	WSYNC	;
     65  f07a					      REPEND
     66  f07a
     67  f07a		       a9 00		      LDA	#0	;
     68  f07c		       85 01		      STA	VBLANK	; turn off VBLANK 
     69  f07e
     70  f07e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     71  f07e							;; set the CTRLPF register to allow playfield reflection
     72  f07e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     73  f07e		       a2 02		      LDX	#%00000010	; CTRLPF register (D0 means reflect the PF)
     74  f080		       86 0a		      STX	CTRLPF	;
     75  f082
     76  f082							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     77  f082							;; draw the 192 visible scanline 
     78  f082							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     79  f082				   VisibleScanline
     80  f082							; draw 10 empety scanlines at the top of the frame
     81  f082					      REPEAT	10
     82  f082		       85 02		      STA	WSYNC
     81  f082					      REPEND
     82  f084		       85 02		      STA	WSYNC
     81  f084					      REPEND
     82  f086		       85 02		      STA	WSYNC
     81  f086					      REPEND
     82  f088		       85 02		      STA	WSYNC
     81  f088					      REPEND
     82  f08a		       85 02		      STA	WSYNC
     81  f08a					      REPEND
     82  f08c		       85 02		      STA	WSYNC
     81  f08c					      REPEND
     82  f08e		       85 02		      STA	WSYNC
     81  f08e					      REPEND
     82  f090		       85 02		      STA	WSYNC
     81  f090					      REPEND
     82  f092		       85 02		      STA	WSYNC
     81  f092					      REPEND
     82  f094		       85 02		      STA	WSYNC
     83  f096					      REPEND
     84  f096
     85  f096							; displays 10 scanlines for the scoreboard number
     86  f096							; pulls data forom an array of bytes defined at NumberBitmap
     87  f096		       a0 00		      LDY	#0	;
     88  f098				   ScorBaoardLoop
     89  f098		       b9 f2 ff 	      LDA	NumberBitmap,Y
     90  f09b		       85 0e		      STA	PF1
     91  f09d		       85 02		      STA	WSYNC
     92  f09f		       c8		      INY
     93  f0a0		       c0 0a		      CPY	#10	; compare Y register with 10 after decrement for looping all scan lines and the bytes inside
     94  f0a2		       d0 f4		      BNE	ScorBaoardLoop
     95  f0a4
     96  f0a4		       a9 00		      LDA	#0
     97  f0a6		       85 0e		      STA	PF1	; disable playfield
     98  f0a8
     99  f0a8							; draw 50 empety scanlines 
    100  f0a8					      REPEAT	50
    101  f0a8		       85 02		      STA	WSYNC
    100  f0a8					      REPEND
    101  f0aa		       85 02		      STA	WSYNC
    100  f0aa					      REPEND
    101  f0ac		       85 02		      STA	WSYNC
    100  f0ac					      REPEND
    101  f0ae		       85 02		      STA	WSYNC
    100  f0ae					      REPEND
    101  f0b0		       85 02		      STA	WSYNC
    100  f0b0					      REPEND
    101  f0b2		       85 02		      STA	WSYNC
    100  f0b2					      REPEND
    101  f0b4		       85 02		      STA	WSYNC
    100  f0b4					      REPEND
    101  f0b6		       85 02		      STA	WSYNC
    100  f0b6					      REPEND
    101  f0b8		       85 02		      STA	WSYNC
    100  f0b8					      REPEND
    101  f0ba		       85 02		      STA	WSYNC
    100  f0ba					      REPEND
    101  f0bc		       85 02		      STA	WSYNC
    100  f0bc					      REPEND
    101  f0be		       85 02		      STA	WSYNC
    100  f0be					      REPEND
    101  f0c0		       85 02		      STA	WSYNC
    100  f0c0					      REPEND
    101  f0c2		       85 02		      STA	WSYNC
    100  f0c2					      REPEND
    101  f0c4		       85 02		      STA	WSYNC
    100  f0c4					      REPEND
    101  f0c6		       85 02		      STA	WSYNC
    100  f0c6					      REPEND
    101  f0c8		       85 02		      STA	WSYNC
    100  f0c8					      REPEND
    101  f0ca		       85 02		      STA	WSYNC
    100  f0ca					      REPEND
    101  f0cc		       85 02		      STA	WSYNC
    100  f0cc					      REPEND
    101  f0ce		       85 02		      STA	WSYNC
    100  f0ce					      REPEND
    101  f0d0		       85 02		      STA	WSYNC
    100  f0d0					      REPEND
    101  f0d2		       85 02		      STA	WSYNC
    100  f0d2					      REPEND
    101  f0d4		       85 02		      STA	WSYNC
    100  f0d4					      REPEND
    101  f0d6		       85 02		      STA	WSYNC
    100  f0d6					      REPEND
    101  f0d8		       85 02		      STA	WSYNC
    100  f0d8					      REPEND
    101  f0da		       85 02		      STA	WSYNC
    100  f0da					      REPEND
    101  f0dc		       85 02		      STA	WSYNC
    100  f0dc					      REPEND
    101  f0de		       85 02		      STA	WSYNC
    100  f0de					      REPEND
    101  f0e0		       85 02		      STA	WSYNC
    100  f0e0					      REPEND
    101  f0e2		       85 02		      STA	WSYNC
    100  f0e2					      REPEND
    101  f0e4		       85 02		      STA	WSYNC
    100  f0e4					      REPEND
    101  f0e6		       85 02		      STA	WSYNC
    100  f0e6					      REPEND
    101  f0e8		       85 02		      STA	WSYNC
    100  f0e8					      REPEND
    101  f0ea		       85 02		      STA	WSYNC
    100  f0ea					      REPEND
    101  f0ec		       85 02		      STA	WSYNC
    100  f0ec					      REPEND
    101  f0ee		       85 02		      STA	WSYNC
    100  f0ee					      REPEND
    101  f0f0		       85 02		      STA	WSYNC
    100  f0f0					      REPEND
    101  f0f2		       85 02		      STA	WSYNC
    100  f0f2					      REPEND
    101  f0f4		       85 02		      STA	WSYNC
    100  f0f4					      REPEND
    101  f0f6		       85 02		      STA	WSYNC
    100  f0f6					      REPEND
    101  f0f8		       85 02		      STA	WSYNC
    100  f0f8					      REPEND
    101  f0fa		       85 02		      STA	WSYNC
    100  f0fa					      REPEND
    101  f0fc		       85 02		      STA	WSYNC
    100  f0fc					      REPEND
    101  f0fe		       85 02		      STA	WSYNC
    100  f0fe					      REPEND
    101  f100		       85 02		      STA	WSYNC
    100  f100					      REPEND
    101  f102		       85 02		      STA	WSYNC
    100  f102					      REPEND
    101  f104		       85 02		      STA	WSYNC
    100  f104					      REPEND
    101  f106		       85 02		      STA	WSYNC
    100  f106					      REPEND
    101  f108		       85 02		      STA	WSYNC
    100  f108					      REPEND
    101  f10a		       85 02		      STA	WSYNC
    102  f10c					      REPEND
    103  f10c
    104  f10c							; dispalys 10 scanlines for the player 0 graphics.
    105  f10c							; pulls data from an array of bytes defined at PlayerBitmap
    106  f10c		       a4 00		      LDY	0
    107  f10e				   Player0Loop
    108  f10e		       b9 e8 ff 	      LDA	PlayerBitmap,Y
    109  f111		       85 1b		      STA	GRP0
    110  f113		       85 02		      STA	WSYNC
    111  f115		       c8		      INY
    112  f116		       c0 0a		      CPY	#10	; compare Y register with 10 after decrement for looping all scan lines and the bytes inside
    113  f118		       d0 f4		      BNE	Player0Loop
    114  f11a
    115  f11a		       a9 00		      LDA	#0
    116  f11c		       85 1b		      STA	GRP0	; disable player 0
    117  f11e
    118  f11e							; dispalys 10 scanlines for the player 0 graphics.
    119  f11e							; pulls data from an array of bytes defined at PlayerBitmap
    120  f11e		       a0 00		      LDY	#0
    121  f120				   Player1Loop
    122  f120		       b9 e8 ff 	      LDA	PlayerBitmap,Y
    123  f123		       85 1c		      STA	GRP1
    124  f125		       85 02		      STA	WSYNC
    125  f127		       c8		      INY
    126  f128		       c0 0a		      CPY	#10
    127  f12a		       d0 f4		      BNE	Player1Loop	; compare Y register with 10 after decrement for looping all scan lines and the bytes inside
    128  f12c
    129  f12c		       a9 00		      LDA	#0
    130  f12e		       85 1c		      STA	GRP1	; disable player 1
    131  f130
    132  f130							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    133  f130							;;draw the remaining 102 scanlines 
    134  f130							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    135  f130					      REPEAT	102
    136  f130		       85 02		      STA	WSYNC
    135  f130					      REPEND
    136  f132		       85 02		      STA	WSYNC
    135  f132					      REPEND
    136  f134		       85 02		      STA	WSYNC
    135  f134					      REPEND
    136  f136		       85 02		      STA	WSYNC
    135  f136					      REPEND
    136  f138		       85 02		      STA	WSYNC
    135  f138					      REPEND
    136  f13a		       85 02		      STA	WSYNC
    135  f13a					      REPEND
    136  f13c		       85 02		      STA	WSYNC
    135  f13c					      REPEND
    136  f13e		       85 02		      STA	WSYNC
    135  f13e					      REPEND
    136  f140		       85 02		      STA	WSYNC
    135  f140					      REPEND
    136  f142		       85 02		      STA	WSYNC
    135  f142					      REPEND
    136  f144		       85 02		      STA	WSYNC
    135  f144					      REPEND
    136  f146		       85 02		      STA	WSYNC
    135  f146					      REPEND
    136  f148		       85 02		      STA	WSYNC
    135  f148					      REPEND
    136  f14a		       85 02		      STA	WSYNC
    135  f14a					      REPEND
    136  f14c		       85 02		      STA	WSYNC
    135  f14c					      REPEND
    136  f14e		       85 02		      STA	WSYNC
    135  f14e					      REPEND
    136  f150		       85 02		      STA	WSYNC
    135  f150					      REPEND
    136  f152		       85 02		      STA	WSYNC
    135  f152					      REPEND
    136  f154		       85 02		      STA	WSYNC
    135  f154					      REPEND
    136  f156		       85 02		      STA	WSYNC
    135  f156					      REPEND
    136  f158		       85 02		      STA	WSYNC
    135  f158					      REPEND
    136  f15a		       85 02		      STA	WSYNC
    135  f15a					      REPEND
    136  f15c		       85 02		      STA	WSYNC
    135  f15c					      REPEND
    136  f15e		       85 02		      STA	WSYNC
    135  f15e					      REPEND
    136  f160		       85 02		      STA	WSYNC
    135  f160					      REPEND
    136  f162		       85 02		      STA	WSYNC
    135  f162					      REPEND
    136  f164		       85 02		      STA	WSYNC
    135  f164					      REPEND
    136  f166		       85 02		      STA	WSYNC
    135  f166					      REPEND
    136  f168		       85 02		      STA	WSYNC
    135  f168					      REPEND
    136  f16a		       85 02		      STA	WSYNC
    135  f16a					      REPEND
    136  f16c		       85 02		      STA	WSYNC
    135  f16c					      REPEND
    136  f16e		       85 02		      STA	WSYNC
    135  f16e					      REPEND
    136  f170		       85 02		      STA	WSYNC
    135  f170					      REPEND
    136  f172		       85 02		      STA	WSYNC
    135  f172					      REPEND
    136  f174		       85 02		      STA	WSYNC
    135  f174					      REPEND
    136  f176		       85 02		      STA	WSYNC
    135  f176					      REPEND
    136  f178		       85 02		      STA	WSYNC
    135  f178					      REPEND
    136  f17a		       85 02		      STA	WSYNC
    135  f17a					      REPEND
    136  f17c		       85 02		      STA	WSYNC
    135  f17c					      REPEND
    136  f17e		       85 02		      STA	WSYNC
    135  f17e					      REPEND
    136  f180		       85 02		      STA	WSYNC
    135  f180					      REPEND
    136  f182		       85 02		      STA	WSYNC
    135  f182					      REPEND
    136  f184		       85 02		      STA	WSYNC
    135  f184					      REPEND
    136  f186		       85 02		      STA	WSYNC
    135  f186					      REPEND
    136  f188		       85 02		      STA	WSYNC
    135  f188					      REPEND
    136  f18a		       85 02		      STA	WSYNC
    135  f18a					      REPEND
    136  f18c		       85 02		      STA	WSYNC
    135  f18c					      REPEND
    136  f18e		       85 02		      STA	WSYNC
    135  f18e					      REPEND
    136  f190		       85 02		      STA	WSYNC
    135  f190					      REPEND
    136  f192		       85 02		      STA	WSYNC
    135  f192					      REPEND
    136  f194		       85 02		      STA	WSYNC
    135  f194					      REPEND
    136  f196		       85 02		      STA	WSYNC
    135  f196					      REPEND
    136  f198		       85 02		      STA	WSYNC
    135  f198					      REPEND
    136  f19a		       85 02		      STA	WSYNC
    135  f19a					      REPEND
    136  f19c		       85 02		      STA	WSYNC
    135  f19c					      REPEND
    136  f19e		       85 02		      STA	WSYNC
    135  f19e					      REPEND
    136  f1a0		       85 02		      STA	WSYNC
    135  f1a0					      REPEND
    136  f1a2		       85 02		      STA	WSYNC
    135  f1a2					      REPEND
    136  f1a4		       85 02		      STA	WSYNC
    135  f1a4					      REPEND
    136  f1a6		       85 02		      STA	WSYNC
    135  f1a6					      REPEND
    136  f1a8		       85 02		      STA	WSYNC
    135  f1a8					      REPEND
    136  f1aa		       85 02		      STA	WSYNC
    135  f1aa					      REPEND
    136  f1ac		       85 02		      STA	WSYNC
    135  f1ac					      REPEND
    136  f1ae		       85 02		      STA	WSYNC
    135  f1ae					      REPEND
    136  f1b0		       85 02		      STA	WSYNC
    135  f1b0					      REPEND
    136  f1b2		       85 02		      STA	WSYNC
    135  f1b2					      REPEND
    136  f1b4		       85 02		      STA	WSYNC
    135  f1b4					      REPEND
    136  f1b6		       85 02		      STA	WSYNC
    135  f1b6					      REPEND
    136  f1b8		       85 02		      STA	WSYNC
    135  f1b8					      REPEND
    136  f1ba		       85 02		      STA	WSYNC
    135  f1ba					      REPEND
    136  f1bc		       85 02		      STA	WSYNC
    135  f1bc					      REPEND
    136  f1be		       85 02		      STA	WSYNC
    135  f1be					      REPEND
    136  f1c0		       85 02		      STA	WSYNC
    135  f1c0					      REPEND
    136  f1c2		       85 02		      STA	WSYNC
    135  f1c2					      REPEND
    136  f1c4		       85 02		      STA	WSYNC
    135  f1c4					      REPEND
    136  f1c6		       85 02		      STA	WSYNC
    135  f1c6					      REPEND
    136  f1c8		       85 02		      STA	WSYNC
    135  f1c8					      REPEND
    136  f1ca		       85 02		      STA	WSYNC
    135  f1ca					      REPEND
    136  f1cc		       85 02		      STA	WSYNC
    135  f1cc					      REPEND
    136  f1ce		       85 02		      STA	WSYNC
    135  f1ce					      REPEND
    136  f1d0		       85 02		      STA	WSYNC
    135  f1d0					      REPEND
    136  f1d2		       85 02		      STA	WSYNC
    135  f1d2					      REPEND
    136  f1d4		       85 02		      STA	WSYNC
    135  f1d4					      REPEND
    136  f1d6		       85 02		      STA	WSYNC
    135  f1d6					      REPEND
    136  f1d8		       85 02		      STA	WSYNC
    135  f1d8					      REPEND
    136  f1da		       85 02		      STA	WSYNC
    135  f1da					      REPEND
    136  f1dc		       85 02		      STA	WSYNC
    135  f1dc					      REPEND
    136  f1de		       85 02		      STA	WSYNC
    135  f1de					      REPEND
    136  f1e0		       85 02		      STA	WSYNC
    135  f1e0					      REPEND
    136  f1e2		       85 02		      STA	WSYNC
    135  f1e2					      REPEND
    136  f1e4		       85 02		      STA	WSYNC
    135  f1e4					      REPEND
    136  f1e6		       85 02		      STA	WSYNC
    135  f1e6					      REPEND
    136  f1e8		       85 02		      STA	WSYNC
    135  f1e8					      REPEND
    136  f1ea		       85 02		      STA	WSYNC
    135  f1ea					      REPEND
    136  f1ec		       85 02		      STA	WSYNC
    135  f1ec					      REPEND
    136  f1ee		       85 02		      STA	WSYNC
    135  f1ee					      REPEND
    136  f1f0		       85 02		      STA	WSYNC
    135  f1f0					      REPEND
    136  f1f2		       85 02		      STA	WSYNC
    135  f1f2					      REPEND
    136  f1f4		       85 02		      STA	WSYNC
    135  f1f4					      REPEND
    136  f1f6		       85 02		      STA	WSYNC
    135  f1f6					      REPEND
    136  f1f8		       85 02		      STA	WSYNC
    135  f1f8					      REPEND
    136  f1fa		       85 02		      STA	WSYNC
    137  f1fc					      REPEND
    138  f1fc
    139  f1fc							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    140  f1fc							;; output 30 more VBLANK overscan lines to complete our frame
    141  f1fc							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    142  f1fc		       a9 02		      LDA	#02
    143  f1fe		       85 01		      STA	VBLANK
    144  f200					      REPEAT	30
    145  f200		       85 02		      STA	WSYNC
    144  f200					      REPEND
    145  f202		       85 02		      STA	WSYNC
    144  f202					      REPEND
    145  f204		       85 02		      STA	WSYNC
    144  f204					      REPEND
    145  f206		       85 02		      STA	WSYNC
    144  f206					      REPEND
    145  f208		       85 02		      STA	WSYNC
    144  f208					      REPEND
    145  f20a		       85 02		      STA	WSYNC
    144  f20a					      REPEND
    145  f20c		       85 02		      STA	WSYNC
    144  f20c					      REPEND
    145  f20e		       85 02		      STA	WSYNC
    144  f20e					      REPEND
    145  f210		       85 02		      STA	WSYNC
    144  f210					      REPEND
    145  f212		       85 02		      STA	WSYNC
    144  f212					      REPEND
    145  f214		       85 02		      STA	WSYNC
    144  f214					      REPEND
    145  f216		       85 02		      STA	WSYNC
    144  f216					      REPEND
    145  f218		       85 02		      STA	WSYNC
    144  f218					      REPEND
    145  f21a		       85 02		      STA	WSYNC
    144  f21a					      REPEND
    145  f21c		       85 02		      STA	WSYNC
    144  f21c					      REPEND
    145  f21e		       85 02		      STA	WSYNC
    144  f21e					      REPEND
    145  f220		       85 02		      STA	WSYNC
    144  f220					      REPEND
    145  f222		       85 02		      STA	WSYNC
    144  f222					      REPEND
    145  f224		       85 02		      STA	WSYNC
    144  f224					      REPEND
    145  f226		       85 02		      STA	WSYNC
    144  f226					      REPEND
    145  f228		       85 02		      STA	WSYNC
    144  f228					      REPEND
    145  f22a		       85 02		      STA	WSYNC
    144  f22a					      REPEND
    145  f22c		       85 02		      STA	WSYNC
    144  f22c					      REPEND
    145  f22e		       85 02		      STA	WSYNC
    144  f22e					      REPEND
    145  f230		       85 02		      STA	WSYNC
    144  f230					      REPEND
    145  f232		       85 02		      STA	WSYNC
    144  f232					      REPEND
    145  f234		       85 02		      STA	WSYNC
    144  f234					      REPEND
    145  f236		       85 02		      STA	WSYNC
    144  f236					      REPEND
    145  f238		       85 02		      STA	WSYNC
    144  f238					      REPEND
    145  f23a		       85 02		      STA	WSYNC
    146  f23c					      REPEND
    147  f23c		       a9 00		      LDA	#0
    148  f23e		       85 01		      STA	VBLANK
    149  f240
    150  f240							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    151  f240							;; loop to next frame 
    152  f240							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    153  f240		       4c 20 f0 	      JMP	StartFarme
    154  f243
    155  f243							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    156  f243							;; defines an array of bytes to draw the screenboard number 
    157  f243							;; we add this bytes i the final ROM addresses
    158  f243							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    159  ffe8					      ORG	$FFE8
    160  ffe8				   PlayerBitmap
    161  ffe8		       7e		      .byte.b	#%01111110	;  ###### 
    162  ffe9		       ff		      .byte.b	#%11111111	; ########
    163  ffea		       99		      .byte.b	#%10011001	; #  ##  #
    164  ffeb		       ff		      .byte.b	#%11111111	; ########
    165  ffec		       ff		      .byte.b	#%11111111	; ########
    166  ffed		       ff		      .byte.b	#%11111111	; ########
    167  ffee		       bd		      .byte.b	#%10111101	; # #### #
    168  ffef		       c3		      .byte.b	#%11000011	; ##	 ##
    169  fff0		       ff		      .byte.b	#%11111111	; ########
    170  fff1		       7e		      .byte.b	#%01111110	;  ###### 
    171  fff2
    172  fff2							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    173  fff2							;; defines an array of bytes to draw the screenboard number 
    174  fff2							;; we add this bytes i the final ROM addresses
    175  fff2							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    176  fff2					      ORG	$FFF2
    177  fff2				   NumberBitmap
    178  fff2		       0e		      .byte.b	#%00001110	; ########
    179  fff3		       0e		      .byte.b	#%00001110	; ########
    180  fff4		       02		      .byte.b	#%00000010	;	###
    181  fff5		       02		      .byte.b	#%00000010	;	###
    182  fff6		       0e		      .byte.b	#%00001110	; ########
    183  fff7		       0e		      .byte.b	#%00001110	; ########
    184  fff8		       08		      .byte.b	#%00001000	; ###
    185  fff9		       08		      .byte.b	#%00001000	; ###
    186  fffa		       0e		      .byte.b	#%00001110	; ########
    187  fffb		       0e		      .byte.b	#%00001110	; ########
    188  fffc
    189  fffc							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    190  fffc							;; complete ROM size 
    191  fffc							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    192  fffc					      ORG	$FFFC
    193  fffc		       00 f0		      .word.w	Reset
    194  fffe		       00 f0		      .word.w	Reset
