------- FILE bomber.asm LEVEL 1 PASS 2
      1  fffe					      PROCESSOR	6502
      2  10000 ????
      3  10000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      4  10000 ????						;; include required files with VCS register memory mapping and macros
      5  10000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       INCLUDE	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE bomber.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      INCLUDE	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE bomber.asm
      8  0000 ????
      9  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     10  0000 ????						;; declare the variables strating from memory address $80  
     11  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     12 U008e ????				      SEG.U	Variables
     13 U0080					      ORG	$80
     14 U0080
     15 U0080		       00	   JetXPos    byte.b		; player 0 x-position
     16 U0081		       00	   JetYPos    byte.b		; player 0 y-position
     17 U0082		       00	   BomberXPos byte.b		; player 1 X-position
     18 U0083		       00	   BomberYPos byte.b		; player 1 y-position
     19 U0084		       00 00	   JetSpritePtr word.w		; pointer to player0 sprite lookup table
     20 U0086		       00 00	   JetColorPtr word.w		; pointer to player0 color lookup table
     21 U0088		       00 00	   BomberSpritePtr word.w		; pointer to player1 sprite lookup table
     22 U008a		       00 00	   BomberColorPtr word.w		; pointer to player1 color lookup table
     23 U008c		       00	   JetAnimOffset byte.b		; player0 sprite frame offset for animation
     24 U008d		       00	   Random     byte.b		; random number generated to set enemy position
     25 U008e
     26 U008e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     27 U008e							;; define constants
     28 U008e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     29 U008e		       00 09	   JET_HEIGHT =	9	; player0 sprite height(# rows in lookup  table)
     30 U008e		       00 09	   BOMBER_HEIGHT =	9	; player1 sprite height(# rows in lookup table)
     31 U008e
     32 U008e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     33 U008e							;; start our ROM code at memory address $F000
     34 U008e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     35  10000 ????				       SEG	code
     36  f000					      ORG	$F000
     37  f000
     38  f000				   Reset
      0  f000					      CLEAN_START		; call macro to reset memory and registers
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     40  f00b
     41  f00b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     42  f00b							;; initize RAM variables and TIA registers 
     43  f00b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     44  f00b		       a9 0a		      LDA	#10
     45  f00d		       85 81		      STA	JetYPos	; JetYPos = 10
     46  f00f
     47  f00f		       a9 3c		      LDA	#60
     48  f011		       85 80		      STA	JetXPos	; JetXPos = 60
     49  f013
     50  f013		       a9 53		      LDA	#83
     51  f015		       85 83		      STA	BomberYPos	; BomberYPos = 83
     52  f017
     53  f017		       a9 36		      LDA	#54
     54  f019		       85 82		      STA	BomberXPos	; BomberXPos = 54 
     55  f01b
     56  f01b		       a9 d4		      LDA	#%11010100
     57  f01d		       85 8d		      STA	Random	; Random = $D4
     58  f01f
     59  f01f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     60  f01f							;; initialize the pointers to correct lookup table address
     61  f01f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     62  f01f		       a9 10		      LDA	#<JetSprite
     63  f021		       85 84		      STA	JetSpritePtr	; low-byte pointer for jet sprite lookup table
     64  f023		       a9 f2		      LDA	#>JetSprite
     65  f025		       85 85		      STA	JetSpritePtr+1	; hi-byte pointer for jet sprite lookup table
     66  f027
     67  f027		       a9 2b		      LDA	#<JetColor
     68  f029		       85 86		      STA	JetColorPtr	; low-byte pointer for jet color lookup table
     69  f02b		       a9 f2		      LDA	#>JetColor
     70  f02d		       85 87		      STA	JetColorPtr+1	; hi-byte pointer for jet color lookup table
     71  f02f
     72  f02f		       a9 22		      LDA	#<BomberSprite
     73  f031		       85 88		      STA	BomberSpritePtr	; low-byte pointer for bomber sprite lookup table
     74  f033		       a9 f2		      LDA	#>BomberSprite
     75  f035		       85 89		      STA	BomberSpritePtr+1	; hi-byte pointer for bomber sprite lookup table
     76  f037
     77  f037		       a9 3d		      LDA	#<BomberColor
     78  f039		       85 8a		      STA	BomberColorPtr	; low-byte pointer for bomber color lookup table
     79  f03b		       a9 f2		      LDA	#>BomberColor
     80  f03d		       85 8b		      STA	BomberColorPtr+1	; hi-byte pointer for bomber color lookup table
     81  f03f
     82  f03f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     83  f03f							;; start the main display loop and frame rendering
     84  f03f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     85  f03f				   StartFrame
     86  f03f
     87  f03f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     88  f03f							;; calculations and tasks preformed in the pre-VBLANK
     89  f03f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     90  f03f		       a5 80		      LDA	JetXPos
     91  f041		       a0 00		      LDY	#0	; loading my register with the code of my object witch is player0 
     92  f043		       20 d9 f1 	      JSR	SetObjectXPos	; jump to my subrutine
     93  f046
     94  f046		       a5 82		      LDA	BomberXPos
     95  f048		       a0 01		      LDY	#1	; bomber object code is 1 becouse it is player1
     96  f04a		       20 d9 f1 	      JSR	SetObjectXPos
     97  f04d
     98  f04d		       85 02		      STA	WSYNC
     99  f04f		       85 2a		      STA	HMOVE	; apply the horizontal offsets previously set
    100  f051
    101  f051							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    102  f051							;; display VSYNC and VBLANK
    103  f051							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    104  f051		       a9 02		      LDA	#2
    105  f053		       85 01		      STA	VBLANK	; turn on VBLANK
    106  f055		       85 00		      STA	VSYNC	; turn on VSYNC
    107  f057					      REPEAT	3
    108  f057		       85 02		      STA	WSYNC	; display 3 recommended lines of VSYNC
    107  f057					      REPEND
    108  f059		       85 02		      STA	WSYNC	; display 3 recommended lines of VSYNC
    107  f059					      REPEND
    108  f05b		       85 02		      STA	WSYNC	; display 3 recommended lines of VSYNC
    109  f05d					      REPEND
    110  f05d		       a9 00		      LDA	#0
    111  f05f		       85 00		      STA	VSYNC	; turn off VSYNC
    112  f061					      REPEAT	37
    113  f061		       85 02		      STA	WSYNC	; display 37 recommended lines of VBLANK
    112  f061					      REPEND
    113  f063		       85 02		      STA	WSYNC	; display 37 recommended lines of VBLANK
    112  f063					      REPEND
    113  f065		       85 02		      STA	WSYNC	; display 37 recommended lines of VBLANK
    112  f065					      REPEND
    113  f067		       85 02		      STA	WSYNC	; display 37 recommended lines of VBLANK
    112  f067					      REPEND
    113  f069		       85 02		      STA	WSYNC	; display 37 recommended lines of VBLANK
    112  f069					      REPEND
    113  f06b		       85 02		      STA	WSYNC	; display 37 recommended lines of VBLANK
    112  f06b					      REPEND
    113  f06d		       85 02		      STA	WSYNC	; display 37 recommended lines of VBLANK
    112  f06d					      REPEND
    113  f06f		       85 02		      STA	WSYNC	; display 37 recommended lines of VBLANK
    112  f06f					      REPEND
    113  f071		       85 02		      STA	WSYNC	; display 37 recommended lines of VBLANK
    112  f071					      REPEND
    113  f073		       85 02		      STA	WSYNC	; display 37 recommended lines of VBLANK
    112  f073					      REPEND
    113  f075		       85 02		      STA	WSYNC	; display 37 recommended lines of VBLANK
    112  f075					      REPEND
    113  f077		       85 02		      STA	WSYNC	; display 37 recommended lines of VBLANK
    112  f077					      REPEND
    113  f079		       85 02		      STA	WSYNC	; display 37 recommended lines of VBLANK
    112  f079					      REPEND
    113  f07b		       85 02		      STA	WSYNC	; display 37 recommended lines of VBLANK
    112  f07b					      REPEND
    113  f07d		       85 02		      STA	WSYNC	; display 37 recommended lines of VBLANK
    112  f07d					      REPEND
    113  f07f		       85 02		      STA	WSYNC	; display 37 recommended lines of VBLANK
    112  f07f					      REPEND
    113  f081		       85 02		      STA	WSYNC	; display 37 recommended lines of VBLANK
    112  f081					      REPEND
    113  f083		       85 02		      STA	WSYNC	; display 37 recommended lines of VBLANK
    112  f083					      REPEND
    113  f085		       85 02		      STA	WSYNC	; display 37 recommended lines of VBLANK
    112  f085					      REPEND
    113  f087		       85 02		      STA	WSYNC	; display 37 recommended lines of VBLANK
    112  f087					      REPEND
    113  f089		       85 02		      STA	WSYNC	; display 37 recommended lines of VBLANK
    112  f089					      REPEND
    113  f08b		       85 02		      STA	WSYNC	; display 37 recommended lines of VBLANK
    112  f08b					      REPEND
    113  f08d		       85 02		      STA	WSYNC	; display 37 recommended lines of VBLANK
    112  f08d					      REPEND
    113  f08f		       85 02		      STA	WSYNC	; display 37 recommended lines of VBLANK
    112  f08f					      REPEND
    113  f091		       85 02		      STA	WSYNC	; display 37 recommended lines of VBLANK
    112  f091					      REPEND
    113  f093		       85 02		      STA	WSYNC	; display 37 recommended lines of VBLANK
    112  f093					      REPEND
    113  f095		       85 02		      STA	WSYNC	; display 37 recommended lines of VBLANK
    112  f095					      REPEND
    113  f097		       85 02		      STA	WSYNC	; display 37 recommended lines of VBLANK
    112  f097					      REPEND
    113  f099		       85 02		      STA	WSYNC	; display 37 recommended lines of VBLANK
    112  f099					      REPEND
    113  f09b		       85 02		      STA	WSYNC	; display 37 recommended lines of VBLANK
    112  f09b					      REPEND
    113  f09d		       85 02		      STA	WSYNC	; display 37 recommended lines of VBLANK
    112  f09d					      REPEND
    113  f09f		       85 02		      STA	WSYNC	; display 37 recommended lines of VBLANK
    112  f09f					      REPEND
    113  f0a1		       85 02		      STA	WSYNC	; display 37 recommended lines of VBLANK
    112  f0a1					      REPEND
    113  f0a3		       85 02		      STA	WSYNC	; display 37 recommended lines of VBLANK
    112  f0a3					      REPEND
    113  f0a5		       85 02		      STA	WSYNC	; display 37 recommended lines of VBLANK
    112  f0a5					      REPEND
    113  f0a7		       85 02		      STA	WSYNC	; display 37 recommended lines of VBLANK
    112  f0a7					      REPEND
    113  f0a9		       85 02		      STA	WSYNC	; display 37 recommended lines of VBLANK
    114  f0ab					      REPEND
    115  f0ab		       85 01		      STA	VBLANK	; turn off VBLANK
    116  f0ad
    117  f0ad							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    118  f0ad							;; display the score board lines
    119  f0ad							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    120  f0ad		       a9 00		      LDA	#0	; clear TIA registers before each new frame
    121  f0af		       85 0d		      STA	PF0
    122  f0b1		       85 0e		      STA	PF1
    123  f0b3		       85 0f		      STA	PF2
    124  f0b5		       85 1b		      STA	GRP0
    125  f0b7		       85 1c		      STA	GRP1
    126  f0b9		       85 08		      STA	COLUPF
    127  f0bb					      REPEAT	20
    128  f0bb		       85 02		      STA	WSYNC	; display 20 scanlines where the scoreboard goes
    127  f0bb					      REPEND
    128  f0bd		       85 02		      STA	WSYNC	; display 20 scanlines where the scoreboard goes
    127  f0bd					      REPEND
    128  f0bf		       85 02		      STA	WSYNC	; display 20 scanlines where the scoreboard goes
    127  f0bf					      REPEND
    128  f0c1		       85 02		      STA	WSYNC	; display 20 scanlines where the scoreboard goes
    127  f0c1					      REPEND
    128  f0c3		       85 02		      STA	WSYNC	; display 20 scanlines where the scoreboard goes
    127  f0c3					      REPEND
    128  f0c5		       85 02		      STA	WSYNC	; display 20 scanlines where the scoreboard goes
    127  f0c5					      REPEND
    128  f0c7		       85 02		      STA	WSYNC	; display 20 scanlines where the scoreboard goes
    127  f0c7					      REPEND
    128  f0c9		       85 02		      STA	WSYNC	; display 20 scanlines where the scoreboard goes
    127  f0c9					      REPEND
    128  f0cb		       85 02		      STA	WSYNC	; display 20 scanlines where the scoreboard goes
    127  f0cb					      REPEND
    128  f0cd		       85 02		      STA	WSYNC	; display 20 scanlines where the scoreboard goes
    127  f0cd					      REPEND
    128  f0cf		       85 02		      STA	WSYNC	; display 20 scanlines where the scoreboard goes
    127  f0cf					      REPEND
    128  f0d1		       85 02		      STA	WSYNC	; display 20 scanlines where the scoreboard goes
    127  f0d1					      REPEND
    128  f0d3		       85 02		      STA	WSYNC	; display 20 scanlines where the scoreboard goes
    127  f0d3					      REPEND
    128  f0d5		       85 02		      STA	WSYNC	; display 20 scanlines where the scoreboard goes
    127  f0d5					      REPEND
    128  f0d7		       85 02		      STA	WSYNC	; display 20 scanlines where the scoreboard goes
    127  f0d7					      REPEND
    128  f0d9		       85 02		      STA	WSYNC	; display 20 scanlines where the scoreboard goes
    127  f0d9					      REPEND
    128  f0db		       85 02		      STA	WSYNC	; display 20 scanlines where the scoreboard goes
    127  f0db					      REPEND
    128  f0dd		       85 02		      STA	WSYNC	; display 20 scanlines where the scoreboard goes
    127  f0dd					      REPEND
    128  f0df		       85 02		      STA	WSYNC	; display 20 scanlines where the scoreboard goes
    127  f0df					      REPEND
    128  f0e1		       85 02		      STA	WSYNC	; display 20 scanlines where the scoreboard goes
    129  f0e3					      REPEND
    130  f0e3
    131  f0e3							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    132  f0e3							;; display the 96 visible scanlines (because 2-line kernel)
    133  f0e3							;; 192 - 20 (scoreboard scanlines) = 172 / 2 = 86 
    134  f0e3							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    135  f0e3				   GameVisibleLines
    136  f0e3		       a9 84		      LDA	#$84
    137  f0e5		       85 09		      STA	COLUBK	; set color of background to blue
    138  f0e7
    139  f0e7		       a9 c2		      LDA	#$C2
    140  f0e9		       85 08		      STA	COLUPF	; set color of playfield(grass) to green
    141  f0eb
    142  f0eb		       a9 01		      LDA	#%00000001
    143  f0ed		       85 0a		      STA	CTRLPF	; enable playfield reflection
    144  f0ef
    145  f0ef		       a9 f0		      LDA	#$F0
    146  f0f1		       85 0d		      STA	PF0	; setting PF0 bit pattern
    147  f0f3
    148  f0f3		       a9 fc		      LDA	#$FC
    149  f0f5		       85 0e		      STA	PF1	; setting PF1 bit pattern
    150  f0f7
    151  f0f7		       a9 00		      LDA	#0
    152  f0f9		       85 0f		      STA	PF2	; setting PF2 bit pattern
    153  f0fb
    154  f0fb		       a2 56		      LDX	#86	; x counts the umber of remaining scanlines
    155  f0fd				   GameLineLoop
    156  f0fd				   AreWeInsideJetSprite
    157  f0fd		       8a		      TXA		; transfer X to A 
    158  f0fe		       38		      SEC		; make sure the carry flag is set before subtraction
    159  f0ff		       e5 81		      SBC	JetYPos	; subtract sprite Y-cordinate
    160  f101		       c5 09		      CMP	JET_HEIGHT	; are we inside the sprite height bounds?
    161  f103		       90 02		      BCC	DrawSpriteP0	; if the result < sprite height then call the draw routine
    162  f105		       a9 00		      LDA	#0	; else, set lookup table index to zero
    163  f107				   DrawSpriteP0
    164  f107		       18		      CLC		; clear carry flag before addition
    165  f108		       65 8c		      ADC	JetAnimOffset	; jump to the correct sprite frame address in memory
    166  f10a
    167  f10a		       a8		      TAY		; load Y so we can work with the pointer
    168  f10b		       b1 84		      LDA	(JetSpritePtr),Y	; load player0 bitmap data from lookup table 
    169  f10d		       85 02		      STA	WSYNC	; wait for scanline
    170  f10f		       85 1b		      STA	GRP0	; set graphics for player0
    171  f111		       b1 86		      LDA	(JetColorPtr),Y	; load player color from lookup table
    172  f113		       85 06		      STA	COLUP0	; set color of player0
    173  f115
    174  f115				   AreWeInsideBomberSprite
    175  f115		       8a		      TXA
    176  f116		       38		      SEC
    177  f117		       e5 83		      SBC	BomberYPos
    178  f119		       c5 09		      CMP	BOMBER_HEIGHT
    179  f11b		       90 02		      BCC	DrawSpriteP1
    180  f11d		       a9 00		      LDA	#0
    181  f11f				   DrawSpriteP1
    182  f11f		       a8		      TAY
    183  f120
    184  f120		       a9 05		      LDA	#%00000101
    185  f122		       85 05		      STA	NUSIZ1	; stretch player 1 sprite 
    186  f124
    187  f124		       b1 88		      LDA	(BomberSpritePtr),Y
    188  f126		       85 02		      STA	WSYNC
    189  f128		       85 1c		      STA	GRP1
    190  f12a		       b1 8a		      LDA	(BomberColorPtr),Y
    191  f12c		       85 07		      STA	COLUP1
    192  f12e
    193  f12e		       ca		      DEX		; X--
    194  f12f		       d0 cc		      BNE	GameLineLoop	; repeat next main game scanline until finished
    195  f131
    196  f131		       a9 00		      LDA	#0
    197  f133		       85 8c		      STA	JetAnimOffset	; reset jet animation frame to zero each frame 
    198  f135							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    199  f135							;; display overscan
    200  f135							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    201  f135		       a9 02		      LDA	#2
    202  f137		       85 01		      STA	VBLANK	; turn VBLANK on again
    203  f139					      REPEAT	30
    204  f139		       85 02		      STA	WSYNC	; display 30 recommended lines of VBLANK overscan
    203  f139					      REPEND
    204  f13b		       85 02		      STA	WSYNC	; display 30 recommended lines of VBLANK overscan
    203  f13b					      REPEND
    204  f13d		       85 02		      STA	WSYNC	; display 30 recommended lines of VBLANK overscan
    203  f13d					      REPEND
    204  f13f		       85 02		      STA	WSYNC	; display 30 recommended lines of VBLANK overscan
    203  f13f					      REPEND
    204  f141		       85 02		      STA	WSYNC	; display 30 recommended lines of VBLANK overscan
    203  f141					      REPEND
    204  f143		       85 02		      STA	WSYNC	; display 30 recommended lines of VBLANK overscan
    203  f143					      REPEND
    204  f145		       85 02		      STA	WSYNC	; display 30 recommended lines of VBLANK overscan
    203  f145					      REPEND
    204  f147		       85 02		      STA	WSYNC	; display 30 recommended lines of VBLANK overscan
    203  f147					      REPEND
    204  f149		       85 02		      STA	WSYNC	; display 30 recommended lines of VBLANK overscan
    203  f149					      REPEND
    204  f14b		       85 02		      STA	WSYNC	; display 30 recommended lines of VBLANK overscan
    203  f14b					      REPEND
    204  f14d		       85 02		      STA	WSYNC	; display 30 recommended lines of VBLANK overscan
    203  f14d					      REPEND
    204  f14f		       85 02		      STA	WSYNC	; display 30 recommended lines of VBLANK overscan
    203  f14f					      REPEND
    204  f151		       85 02		      STA	WSYNC	; display 30 recommended lines of VBLANK overscan
    203  f151					      REPEND
    204  f153		       85 02		      STA	WSYNC	; display 30 recommended lines of VBLANK overscan
    203  f153					      REPEND
    204  f155		       85 02		      STA	WSYNC	; display 30 recommended lines of VBLANK overscan
    203  f155					      REPEND
    204  f157		       85 02		      STA	WSYNC	; display 30 recommended lines of VBLANK overscan
    203  f157					      REPEND
    204  f159		       85 02		      STA	WSYNC	; display 30 recommended lines of VBLANK overscan
    203  f159					      REPEND
    204  f15b		       85 02		      STA	WSYNC	; display 30 recommended lines of VBLANK overscan
    203  f15b					      REPEND
    204  f15d		       85 02		      STA	WSYNC	; display 30 recommended lines of VBLANK overscan
    203  f15d					      REPEND
    204  f15f		       85 02		      STA	WSYNC	; display 30 recommended lines of VBLANK overscan
    203  f15f					      REPEND
    204  f161		       85 02		      STA	WSYNC	; display 30 recommended lines of VBLANK overscan
    203  f161					      REPEND
    204  f163		       85 02		      STA	WSYNC	; display 30 recommended lines of VBLANK overscan
    203  f163					      REPEND
    204  f165		       85 02		      STA	WSYNC	; display 30 recommended lines of VBLANK overscan
    203  f165					      REPEND
    204  f167		       85 02		      STA	WSYNC	; display 30 recommended lines of VBLANK overscan
    203  f167					      REPEND
    204  f169		       85 02		      STA	WSYNC	; display 30 recommended lines of VBLANK overscan
    203  f169					      REPEND
    204  f16b		       85 02		      STA	WSYNC	; display 30 recommended lines of VBLANK overscan
    203  f16b					      REPEND
    204  f16d		       85 02		      STA	WSYNC	; display 30 recommended lines of VBLANK overscan
    203  f16d					      REPEND
    204  f16f		       85 02		      STA	WSYNC	; display 30 recommended lines of VBLANK overscan
    203  f16f					      REPEND
    204  f171		       85 02		      STA	WSYNC	; display 30 recommended lines of VBLANK overscan
    203  f171					      REPEND
    204  f173		       85 02		      STA	WSYNC	; display 30 recommended lines of VBLANK overscan
    205  f175					      REPEND
    206  f175		       a9 00		      LDA	#0
    207  f177		       85 01		      STA	VBLANK	; turn oof VBLANK
    208  f179
    209  f179							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    210  f179							;; process joystick input for player0
    211  f179							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    212  f179				   CheckP0Up
    213  f179		       a9 10		      LDA	#%00010000	; player0 joystick up
    214  f17b		       2c 80 02 	      BIT	SWCHA
    215  f17e		       d0 06		      BNE	CheckP0Down	; if bit pattern doesnt match, bypass Up block
    216  f180		       e6 81		      INC	JetYPos
    217  f182		       a9 00		      LDA	#0
    218  f184		       85 8c		      STA	JetAnimOffset	; reset animation frame to first frame
    219  f186
    220  f186				   CheckP0Down
    221  f186		       a9 20		      LDA	#%00100000	; player0 joystick down
    222  f188		       2c 80 02 	      BIT	SWCHA
    223  f18b		       d0 06		      BNE	CheckP0Left	; if bit pattern doesnt match, bypass Down block
    224  f18d		       c6 81		      DEC	JetYPos
    225  f18f		       a9 00		      LDA	#0
    226  f191		       85 8c		      STA	JetAnimOffset	; reset animation frame to first frame
    227  f193
    228  f193				   CheckP0Left
    229  f193		       a9 40		      LDA	#%01000000	; player0 joystick left
    230  f195		       2c 80 02 	      BIT	SWCHA
    231  f198		       d0 06		      BNE	CheckP0Right	; if bit pattern doesnt match, bypass Left block
    232  f19a		       c6 80		      DEC	JetXPos
    233  f19c		       a5 09		      LDA	JET_HEIGHT	; 9
    234  f19e		       85 8c		      STA	JetAnimOffset	; set animation offset to second frame
    235  f1a0
    236  f1a0				   CheckP0Right
    237  f1a0		       a9 80		      LDA	#%10000000	; player0 joystick Right
    238  f1a2		       2c 80 02 	      BIT	SWCHA
    239  f1a5		       d0 06		      BNE	EndInputCheck	; if bit pattern doesnt match, bypass Right block
    240  f1a7		       e6 80		      INC	JetXPos
    241  f1a9		       a5 09		      LDA	JET_HEIGHT	; 9
    242  f1ab		       85 8c		      STA	JetAnimOffset	; set animation offset to second frame
    243  f1ad
    244  f1ad				   EndInputCheck		; fallback when no input was performed 
    245  f1ad
    246  f1ad							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    247  f1ad							;; calculation to update position for next fram
    248  f1ad							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    249  f1ad				   UpdateBomberPosition
    250  f1ad		       a5 83		      LDA	BomberYPos
    251  f1af		       18		      CLC
    252  f1b0		       c9 00		      CMP	#0	; compare bomber Y-position with zero
    253  f1b2		       30 05		      BMI	ResetBomberPosition	; if it is < 0 then reset Y-position to the top 
    254  f1b4		       c6 83		      DEC	BomberYPos	; else, decrement enemy Y-position for next frame
    255  f1b6		       4c bc f1 	      JMP	EndPositionUpdate
    256  f1b9				   ResetBomberPosition
    257  f1b9		       20 f2 f1 	      JSR	GetRandomBomberPosition	; call subroutine for random X-position 
    258  f1bc
    259  f1bc				   EndPositionUpdate		; fallback for the position update code
    260  f1bc
    261  f1bc
    262  f1bc							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    263  f1bc							;; check for objects collision
    264  f1bc							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    265  f1bc				   CheckCollisionP0P1		; collision beetween jet and bomber
    266  f1bc		       a9 80		      LDA	#%10000000	; CXPPMM bit 7 detects P0 and P1 collision
    267  f1be		       24 07		      BIT	CXPPMM	; check CXPPMM bit 7 with the above pattern
    268  f1c0		       d0 03		      BNE	CollisionP0P1	; collision between P0 and P1 happened
    269  f1c2		       4c c8 f1 	      JMP	CheckCollisionP0PF	; skip to next check
    270  f1c5				   CollisionP0P1
    271  f1c5		       20 ed f1 	      JSR	GameOver	; call gameover subroutine
    272  f1c8
    273  f1c8				   CheckCollisionP0PF
    274  f1c8		       a9 80		      LDA	#%10000000	; CXP0FB bit 7 detects P0 and PlayField collision
    275  f1ca		       24 02		      BIT	CXP0FB	; check CXP0FB bit 7 with the above pattern
    276  f1cc		       d0 03		      BNE	CollisionP0PF	; collision between P0 and PF happened
    277  f1ce		       4c d4 f1 	      JMP	EndCollisionCheck	; jump to end
    278  f1d1				   CollisionP0PF
    279  f1d1		       20 ed f1 	      JSR	GameOver	; call gameover subroutine
    280  f1d4
    281  f1d4				   EndCollisionCheck		; fallback 
    282  f1d4		       85 2c		      STA	CXCLR	; clear all collision flag before he next frame
    283  f1d6
    284  f1d6							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    285  f1d6							;; loop back to start a brand new frame
    286  f1d6							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    287  f1d6		       4c 3f f0 	      JMP	StartFrame	; continue to dispay the next frame
    288  f1d9
    289  f1d9							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    290  f1d9							;; subroutine to handle object horizontal position with fine offset
    291  f1d9							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    292  f1d9							;; A is the target x-cordinate position in pixels of our object 
    293  f1d9							;; Y is the object type (0:player0, 1:player1 2:missile0  3:missile1 4:ball)
    294  f1d9							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    295  f1d9				   SetObjectXPos SUBROUTINE
    296  f1d9		       85 02		      STA	WSYNC	; start a fresh new scanline
    297  f1db		       38		      SEC		; make sure carry flag is set before subtraction
    298  f1dc				   Div15Loop
    299  f1dc		       e9 0f		      SBC	#15	; subtract 15 from accumulator
    300  f1de		       b0 fc		      BCS	Div15Loop	; loop until carry-flag is clear
    301  f1e0		       49 07		      EOR	#7	; exclusive or 7 with register A (handle offset range from -8 to 7)
    302  f1e2		       0a		      ASL
    303  f1e3		       0a		      ASL
    304  f1e4		       0a		      ASL
    305  f1e5		       0a		      ASL		; four shift left to get only the top four bits
    306  f1e6		       99 20 00 	      STA	HMP0,Y	; store the fine offset to the correct HMxx
    307  f1e9		       99 10 00 	      STA	RESP0,Y	; fix object position in 15-step increment
    308  f1ec		       60		      RTS
    309  f1ed
    310  f1ed							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    311  f1ed							;; game over subroutine
    312  f1ed							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    313  f1ed				   GameOver   SUBROUTINE
    314  f1ed		       a9 1e		      LDA	#30
    315  f1ef		       85 09		      STA	COLUBK
    316  f1f1		       60		      RTS
    317  f1f2
    318  f1f2							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    319  f1f2							;; subroutine to generate a linear-feedback shift rwgister random number
    320  f1f2							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    321  f1f2							;; generate a LFSR random number 
    322  f1f2							;; divide random value by 4 to limit the size of thr result to match river
    323  f1f2							;; add 30 to compensate for left green playfield
    324  f1f2							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    325  f1f2				   GetRandomBomberPosition SUBROUTINE
    326  f1f2		       a5 8d		      LDA	Random
    327  f1f4		       0a		      ASL
    328  f1f5		       45 8d		      EOR	Random
    329  f1f7		       0a		      ASL
    330  f1f8		       45 8d		      EOR	Random
    331  f1fa		       0a		      ASL
    332  f1fb		       0a		      ASL
    333  f1fc		       45 8d		      EOR	Random
    334  f1fe		       0a		      ASL
    335  f1ff		       26 8d		      ROL	Random	; performs a series of shifts and bit operations
    336  f201
    337  f201		       4a		      LSR
    338  f202		       4a		      LSR		; divide the value by 4 with 2 right shifts
    339  f203		       85 82		      STA	BomberXPos	; save it to the variable BomberXPos
    340  f205		       a9 1e		      LDA	#30
    341  f207		       65 82		      ADC	BomberXPos	; BomberXPos + 30
    342  f209		       85 82		      STA	BomberXPos	; set the new value to the BomberXPos variable
    343  f20b
    344  f20b		       a9 60		      LDA	#96
    345  f20d		       85 83		      STA	BomberYPos	; sets the Y-position to the top of screen
    346  f20f
    347  f20f		       60		      RTS
    348  f210
    349  f210							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    350  f210							;; declare ROM lookup tables
    351  f210							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    352  f210				   JetSprite
    353  f210		       00		      .byte.b	#%00000000	;
    354  f211		       14		      .byte.b	#%00010100	;   # #
    355  f212		       7f		      .byte.b	#%01111111	; #######
    356  f213		       3e		      .byte.b	#%00111110	;  #####
    357  f214		       1c		      .byte.b	#%00011100	;   ###
    358  f215		       1c		      .byte.b	#%00011100	;   ###
    359  f216		       08		      .byte.b	#%00001000	;    #
    360  f217		       08		      .byte.b	#%00001000	;    #
    361  f218		       08		      .byte.b	#%00001000	;    #
    362  f219
    363  f219				   JetSpriteTurn
    364  f219		       00		      .byte.b	#%00000000	;
    365  f21a		       08		      .byte.b	#%00001000	;    #
    366  f21b		       3e		      .byte.b	#%00111110	;  #####
    367  f21c		       1c		      .byte.b	#%00011100	;   ###
    368  f21d		       1c		      .byte.b	#%00011100	;   ###
    369  f21e		       1c		      .byte.b	#%00011100	;   ###
    370  f21f		       08		      .byte.b	#%00001000	;    #
    371  f220		       08		      .byte.b	#%00001000	;    #
    372  f221		       08		      .byte.b	#%00001000	;    #
    373  f222
    374  f222				   BomberSprite
    375  f222		       00		      .byte.b	#%00000000	;
    376  f223		       08		      .byte.b	#%00001000	;    #
    377  f224		       08		      .byte.b	#%00001000	;    #
    378  f225		       2a		      .byte.b	#%00101010	;  # # #
    379  f226		       3e		      .byte.b	#%00111110	;  #####
    380  f227		       7f		      .byte.b	#%01111111	; #######
    381  f228		       2a		      .byte.b	#%00101010	;  # # #
    382  f229		       08		      .byte.b	#%00001000	;    #
    383  f22a		       1c		      .byte.b	#%00011100	;   ###
    384  f22b
    385  f22b				   JetColor
    386  f22b		       00		      .byte.b	#$00
    387  f22c		       fe		      .byte.b	#$FE
    388  f22d		       0c		      .byte.b	#$0C
    389  f22e		       0e		      .byte.b	#$0E
    390  f22f		       0e		      .byte.b	#$0E
    391  f230		       04		      .byte.b	#$04
    392  f231		       ba		      .byte.b	#$BA
    393  f232		       0e		      .byte.b	#$0E
    394  f233		       08		      .byte.b	#$08
    395  f234
    396  f234				   JetColorTurn
    397  f234		       00		      .byte.b	#$00
    398  f235		       fe		      .byte.b	#$FE
    399  f236		       0c		      .byte.b	#$0C
    400  f237		       0e		      .byte.b	#$0E
    401  f238		       0e		      .byte.b	#$0E
    402  f239		       04		      .byte.b	#$04
    403  f23a		       0e		      .byte.b	#$0E
    404  f23b		       0e		      .byte.b	#$0E
    405  f23c		       08		      .byte.b	#$08
    406  f23d
    407  f23d				   BomberColor
    408  f23d		       00		      .byte.b	#$00
    409  f23e		       32		      .byte.b	#$32
    410  f23f		       32		      .byte.b	#$32
    411  f240		       0e		      .byte.b	#$0E
    412  f241		       40		      .byte.b	#$40
    413  f242		       40		      .byte.b	#$40
    414  f243		       40		      .byte.b	#$40
    415  f244		       40		      .byte.b	#$40
    416  f245		       40		      .byte.b	#$40
    417  f246
    418  f246							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    419  f246							;; complete ROM size with exactly 4KB
    420  f246							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    421  fffc					      ORG	$FFFC	; move to position $FFFC in memory
    422  fffc		       00 f0		      word.w	Reset	; write 2 bytes with the program reset address
    423  fffe		       00 f0		      word.w	Reset	; write 2 bytes with the interruption vector
